version: '3.8'

services:
  # =====================================
  # INFRASTRUKTUR
  # =====================================
  postgres:
    image: postgres:15
    container_name: shared-postgres
    environment:
      POSTGRES_DB: complyo_db
      POSTGRES_USER: complyo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shared-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U complyo_user -d complyo_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: shared-redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    networks:
      - shared-network
    restart: unless-stopped

  # =====================================
  # REVERSE PROXY & SSL
  # =====================================
  nginx-proxy:
    image: nginxproxy/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - proxy-network
    restart: unless-stopped

  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - acme_state:/etc/acme.sh
    environment:
      DEFAULT_EMAIL: ${LETSENCRYPT_EMAIL}
      NGINX_PROXY_CONTAINER: nginx-proxy
    networks:
      - proxy-network
    restart: unless-stopped
    depends_on:
      - nginx-proxy

  # =====================================
  # COMPLYO SERVICES
  # =====================================
  landing:
    build:
      context: ./landing
    container_name: complyo-landing
    environment:
      VIRTUAL_HOST: ${VIRTUAL_HOST_LANDING}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST_LANDING}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_PORT: 80
    networks:
      - proxy-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
    container_name: complyo-backend
    environment:
      PORT: 8002
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENVIRONMENT: ${ENVIRONMENT}
      VIRTUAL_HOST: ${VIRTUAL_HOST_API}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST_API}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_PORT: ${VIRTUAL_PORT_BACKEND}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    networks:
      - proxy-network
      - shared-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  dashboard:
    build:
      context: ./dashboard
    container_name: complyo-dashboard
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: 3002
      VIRTUAL_HOST: ${VIRTUAL_HOST_DASHBOARD}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST_DASHBOARD}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_PORT: ${VIRTUAL_PORT_DASHBOARD}
    networks:
      - proxy-network
    restart: unless-stopped
    depends_on:
      - backend

networks:
  proxy-network:
    external: true
  shared-network:
    external: true

volumes:
  postgres_data:
    external: true
  nginx_certs:
    external: true
  nginx_vhost:
    external: true
  nginx_html:
    external: true
  acme_state:
    external: true
